"""
Functions for the creating of graph from CRS score and regulon structure
"""

import networkx as nx

def crs_graph(file):
    """Create CRS graph"""
    G = nx.Graph()

    datafile = open(file)
    for line in datafile:
        line = line.rstrip('\n\r')
        if line.startswith('g'): continue
        else:
            #print(line)
            gi1, gi2, zscore, in_regulon, names = line.split('\t')

            G.add_edge(gi1, gi2, zscore=float(zscore), in_regulon=in_regulon, names=names)

    return G

def read_regulon(file="../data/regulon_by_first_gene.txt"):
    rv = {}
    reg_now = ''

    datafile = open(file)
    for line in datafile:
        line = line.rstrip('\n\r')
        if line.startswith('>'):
            reg_now = line[1:]
        else:
            rv[reg_now] = line.lstrip().split()

    return rv

def read_regulon_g2r(file="../data/regulon_by_first_gene.txt"):
    rv = {}
    reg_now = ''

    datafile = open(file)
    for line in datafile:
        line = line.rstrip('\n\r')
        if line.startswith('>'):
            reg_now = line[1:]
        else:
            for gi in line.lstrip().split():
                if gi in rv: rv[gi] += ('_' + reg_now)
                else: rv[gi] = reg_now

    return rv


def read_LOO(file):
    rv = {}
    f=open(file)
    for l in f:
        l = l.rstrip()
        (reg, loo) = l.split()
        rv[reg] = float(loo)

    return rv


def edge_density(edge_n, node_n):
    """probobility of having an edge between two nodes"""
    try:
        rv = 2.0 * edge_n / (node_n * (node_n - 1))
    except ZeroDivisionError:
        sys.stderr.write("graph has 0 node, return 0 for edge density")
        rv = 0

    return rv

def edge_average_zscore(graph):
    """average zscore of all edges"""
    n_edges = graph.number_of_edges()
    rv = 0

    if n_edges == 0:
        return -1
    else:
        for i in graph.edges(data=True):
            rv += i[2]['zscore']

    return rv / n_edges






def degree_distribution(graph):
    return 0
    


if __name__ == "__main__":

    import networkx as nx
    import sys
    import os


    try:
        crs_f = sys.argv[1]
    except IndexError:
        sys.exit("Check regulon edge desienty in whole graph\npython %s <tsv file generated by edges2table.pl>" % (sys.argv[0]))

    bindir = os.path.abspath(os.path.dirname(sys.argv[0]))
    regulon_f = os.path.join(bindir, "../data/regulon_by_first_gene.txt");
    loo_f = os.path.join(bindir, "../data/LOO_per_matrix_site.tsv");

    G = crs_graph(crs_f)
    LOO = read_LOO(loo_f)

    print("graph has %d nodes with %d edges, edges to nodes ratio: %f, edge average zscore: %f"\
            %(nx.number_of_nodes(G),
                nx.number_of_edges(G),
                edge_density(nx.number_of_edges(G), nx.number_of_nodes(G)),
                edge_average_zscore(G)))
    print(nx.number_connected_components(G),"connected components")

    regulon = read_regulon(regulon_f)

    print("reg\tLOO\tsize\tnodes\tedges\tratio\tavg_zscore")
    for reg in regulon.keys():
        if len(regulon[reg]) > 2:
            H = G.subgraph(regulon[reg])

            loo = -1
            if reg in LOO: loo = LOO[reg]

            print("%s\t%g\t%d\t%d\t%d\t%f\t%f"\
                    %(reg,
                        loo,
                        len(regulon[reg]),
                        nx.number_of_nodes(H),
                        nx.number_of_edges(H),
                        edge_density(nx.number_of_edges(H), nx.number_of_nodes(H)),
                        edge_average_zscore(H)))


