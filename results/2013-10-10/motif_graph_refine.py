#!/usr/bin/env python
"""
Read the motif graph file generated by closurecompare2table.pl, add degree for each node,
add the common neighbor count for the two nodes of each edge.
"""
import networkx as nx
import motif_graph as mg

if __name__ == "__main__":

    
    import networkx as nx
    import sys
    import os
    from pprint import pprint

    try:
        crs_f = sys.argv[1]
        similarity_cutoff = sys.argv[2]
        zscore_cutoff = sys.argv[3]
    except IndexError:
        sys.exit("Motif graph refine for the output of closurecompare2table.pl\npython %s <tsv file generated by closurecompare2table.pl> similarity_cutoff zscore_cutoff" % (sys.argv[0]))

    G = mg.motif_graph(crs_f, similarity_cutoff, zscore_cutoff)

    # file head
    print "opr1_motif\topr2_motif\tsimilarity\tzscore\tnode1_degree\tnode2_degree\tcommon_neighbor\tin_regulon\tin_regulon_name";

    linecount = 0
    datafile = open(crs_f)
    next(datafile)
    for line in datafile:

        linecount += 1
        if(linecount % 10000 == 0): sys.stderr.write("reading line %i\n" % (linecount))

        line = line.rstrip('\n\r')
        gi1, gi2, similarity, zscore, in_regulon, names = line.split('\t')

        if (zscore == ''):continue
        if (similarity < similarity_cutoff or zscore < zscore_cutoff): continue

        node1_degree = G.degree(gi1)
        node2_degree = G.degree(gi2)
        common_neighbor = mg.count_common_neighbors(G, gi1, gi2)

        print("%s\t%s\t%f\t%f\t%i\t%i\t%i\t%i\t%s" % (
            gi1,
            gi2,
            float(similarity),
            float(zscore),
            node1_degree,
            node2_degree,
            common_neighbor,
            int(in_regulon),
            names))

    datafile.close()




