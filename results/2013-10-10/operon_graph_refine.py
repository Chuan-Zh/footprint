#!/usr/bin/env python
"""
Read the operon graph file generated by closurecompare2operontable.pl, add degree for each node,
add the common neighbor count for the two nodes of each edge.
"""
import networkx as nx
import operon_graph as og

if __name__ == "__main__":

    
    import networkx as nx
    import sys
    import os
    from pprint import pprint

    try:
        crs_f = sys.argv[1]
        similarity_cutoff = sys.argv[2]
        zscore_cutoff = sys.argv[3]
    except IndexError:
        sys.exit("Operon graph refine for the output of closurecompare2operontable.pl\npython %s <tsv file generated by closurecompare2operontable.pl> similarity_cutoff zscore_cutoff" % (sys.argv[0]))

    G = og.operon_graph(crs_f, similarity_cutoff, zscore_cutoff)

    # file head
    print "opr1\topr2\tsimilarity\tzscore\tmultiplicity\tnode1_degree\tnode2_degree\tcommon_neighbor\tin_regulon\tin_regulon_name";

    linecount = 0
    datafile = open(crs_f)
    next(datafile)
    for line in datafile:

        linecount += 1
        if(linecount % 10000 == 0): sys.stderr.write("reading line %i\n" % (linecount))

        line = line.rstrip('\n\r')
        gi1, gi2, similarity, zscore, multiplicity, in_regulon, names = line.split('\t')

        if (zscore == ''):continue
        if (similarity < similarity_cutoff or zscore < zscore_cutoff): continue

        node1_degree = G.degree(gi1)
        node2_degree = G.degree(gi2)
        common_neighbor = og.count_common_neighbors(G, gi1, gi2)

        print("%s\t%s\t%f\t%f\t%i\t%i\t%i\t%i\t%i\t%s" % (
            gi1,
            gi2,
            float(similarity),
            float(zscore),
            int(multiplicity),
            node1_degree,
            node2_degree,
            common_neighbor,
            int(in_regulon),
            names))

    datafile.close()




